#include<cstdio>
#include<cmath>
#include<stack>
#include<queue>
#include<map>
#include<iomanip>
#include<set>
#include<string.h>
#include<string>
#include<functional>
#include<algorithm>
#include<assert.h>
#include<iostream>
#define endl '\n'
#define mem(a) memset(a,0,sizeof(a))
#define legal(a,b) a&b
using namespace std;
typedef long long LL;
typedef long long ll;
typedef unsigned long long ull;
const int N = 1e7 + 1;
const int inf = 1e9;
const int mod = 1e9+7;
const int BufferSize = 1 << 16;
struct mat {
	ll m[105][105];
	mat() { mem(m); }
};
int n;
mat mul(mat a, mat b)
{
	mat ans;
	int i, j, k;
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= n;j++)
			ans.m[i][j] = 0;
	for (int i = 1;i <= n;i++)
		for (int j = 1;j <= n;j++)
			for (int k = 1;k <= n;k++)
				ans.m[i][j] = (ans.m[i][j] + a.m[i][k] * b.m[k][j]) % mod;
	return ans;
}
mat matqp(mat t,ll p)
{
	mat ans;
	int i, j;
	for (i = 1;i <= n;i++)
	{
		for (j = 1;j <= n;j++)
		{
			if (i == j) ans.m[i][j] = 1;
			else ans.m[i][j] = 0;
		}
	}
	while (p)
	{
		if (p & 1)
			ans = mul(ans, t);
		t = mul(t, t);
		p = p >> 1;
	}
	return ans;
}
int main()
{
	ll k;
	while (cin >> n>>k)
	{
		mat t;
		for (int i = 1;i <= n;i++)
		{
			for (int j = 1;j <= n;j++)
			{
				cin >> t.m[i][j];
			}
		}
		/*for (int i = 1;i <= n;i++)
		{
			cout << t.m[i][1];
			for (int j = 2;j <= n;j++)
				cout << ' ' << t.m[i][j];
			cout << endl;
		}*/
		mat ans = matqp(t, k);
		for (int i = 1;i <= n;i++)
		{
			cout << ans.m[i][1];
			for (int j = 2;j <= n;j++)
				cout << ' ' << ans.m[i][j];
			cout << endl;
		}
	}
}
